https://habr.com/ru/post/310460/

----------------------------------------------------

Images (образы) - Схемы нашего приложения, которые являются основой контейнеров. В примере выше мы использовали команду docker pull чтобы скачать образ busybox.
Containers (контейнеры) - Создаются на основе образа и запускают само приложение. Мы создали контейнер командой docker run, и использовали образ busybox, скачанный ранее. Список запущенных контейнеров можно увидеть с помощью команды docker ps.
Docker Daemon (демон Докера) - Фоновый сервис, запущенный на хост-машине, который отвечает за создание, запуск и уничтожение Докер-контейнеров. Демон — это процесс, который запущен на операционной системе, с которой взаимодействует клиент.
Docker Client (клиент Докера) - Утилита командной строки, которая позволяет пользователю взаимодействовать с демоном. Существуют другие формы клиента, например, Kitematic, с графическим интерфейсом.
Docker Hub - Регистр Докер-образов. Грубо говоря, архив всех доступных образов. Если нужно, то можно содержать собственный регистр и использовать его для получения образов.

----------------------------------------------------

Base images (базовые образы) — это образы, которые не имеют родительского образа. Обычно это образы с операционной системой, такие как ubuntu, busybox или debian.
Child images (дочерние образы) — это образы, построенные на базовых образах и обладающие дополнительной функциональностью.

Официальные образы — это образы, которые официально поддерживаются командой Docker. Обычно в их названии одно слово. В списке выше python, ubuntu, busybox и hello-world — базовые образы.
Пользовательские образы — образы, созданные простыми пользователями вроде меня и вас. Они построены на базовых образах. Обычно, они называются по формату user/image-name.

----------------------------------------------------
Docker Machine позволяет создавать Докер-хосты на своем компьютере, облачном провайдере или внутри дата-центра.
Docker Compose — инструмент для определения и запуска много-контейнерных приложений.
Docker Swarm — нативное решение для кластеризации.
----------------------------------------------------

docker run -it alpine sh
apk add mc
    https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management
exit
docker ps -a
docker commit <container-name> alpine_mc
docker rm <container-name>
docker run -it alpine_mc mc

docker run -it --rm alpine_mc mc

----------------------------------------------------

docker network --help
docker network ls
docker network prune

docker network ls
docker network inspect bridge

docker network create foodtrucks
    Команда network create создает новую сеть bridge. Нам сейчас нужен именно такой тип. Существуют другие типы сетей, и вы можете почитать о них в официальной документации.
    Теперь у нас есть сеть. Можно запустить наши контейнеры внутри сети с помощью флага --net
    docker run -d --net foodtrucks -p 9200:9200 -p 9300:9300 --name es elasticsearch
    docker run -d --net foodtrucks -p 5000:5000 --name foodtrucks-web prakhar1989/foodtrucks-web
    docker network inspect foodtrucks

    Перед тем, как завершить этот раздел, стоит отметить, что docker network это относительно новая фича, она входит в релиз Docker 1.9 .
    До того, как появился network, ссылки (--link) были допустимым способом настройки взаимодействия между контейнерами. В соответствии с официальной документацией, linking вскоре будет переведены в статус deprecated. Если вам попадется туториал или статья, где используется link для соединения контейнеров, то просто не забывайте использовать вместо этого network

docker-compose
    Видно, что Compose самостоятельно создал сеть foodtrucks_default и подсоединил оба сервиса в эту сеть, так, чтобы они могли общаться друг с другом. Каждый контейнер для сервиса подключен к сети, и оба контейнера доступны другим контейнерам в сети. Они доступны по hostname, который совпадает с названием контейнера

----------------------------------------------------
docker compse up
docker-compose exec haproxy sh
docker-compose rm
